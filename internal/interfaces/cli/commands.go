package cli

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/sant0x00/downloader-music/internal/application"
	"github.com/sant0x00/downloader-music/internal/domain"
	"github.com/sant0x00/downloader-music/internal/infrastructure/config"
	"github.com/sant0x00/downloader-music/internal/infrastructure/download"
	"github.com/sant0x00/downloader-music/internal/infrastructure/storage"
	"github.com/sant0x00/downloader-music/internal/infrastructure/web"
	"github.com/sant0x00/downloader-music/pkg/logger"
	"github.com/spf13/cobra"
)

func showBanner() {
	banner := `
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó        ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù        ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó        ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù 

üéµ Downloader de Clipes Musicais JW.org üéµ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`
	fmt.Print(banner)
}

func showSmallBanner() {
	fmt.Println("üéµ Clipes JW.org Downloader üéµ")
	fmt.Println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
}

type CLI struct {
	config          *config.Config
	logger          domain.Logger
	downloadService *application.DownloadService
}

func NewCLI() (*CLI, error) {
	configPath := filepath.Join("configs", "config.yaml")
	cfg, err := config.LoadConfig(configPath)
	if err != nil {
		return nil, fmt.Errorf("erro ao carregar configura√ß√£o: %w", err)
	}

	log, err := logger.NewSimpleLogger(cfg.Logging.Level, cfg.Logging.OutputFile)
	if err != nil {
		return nil, fmt.Errorf("erro ao criar logger: %w", err)
	}

	repository := storage.NewFileSystemRepository(cfg.Download.OutputDirectory, log)
	scraper := web.NewJWScraper(cfg.Scraping.UserAgent, cfg.Scraping.DelayBetweenRequests, log)
	downloader := download.NewHTTPDownloader(
		repository,
		log,
		cfg.Download.ConcurrentWorkers,
		cfg.Download.RetryAttempts,
		cfg.Download.TimeoutSeconds,
	)

	downloadService := application.NewDownloadService(scraper, downloader, repository, log)

	return &CLI{
		config:          cfg,
		logger:          log,
		downloadService: downloadService,
	}, nil
}

func (c *CLI) Execute() error {
	rootCmd := &cobra.Command{
		Use:   "downloader-music",
		Short: "Downloader de clipes musicais do jw.org",
		Long: `üéµ Clipes JW.org Downloader üéµ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Uma aplica√ß√£o para baixar automaticamente todos os clipes musicais 
em portugu√™s do site oficial das Testemunhas de Jeov√° (jw.org).

A aplica√ß√£o organiza os arquivos em pastas por ano e mant√©m os 
nomes de arquivos limpos e organizados.`,
		Run: func(cmd *cobra.Command, args []string) {
			showBanner()
			fmt.Println("Use 'downloader-music --help' para ver os comandos dispon√≠veis.")
			fmt.Println()
		},
	}

	downloadCmd := &cobra.Command{
		Use:   "download",
		Short: "Baixa clipes musicais",
		Long:  "Baixa clipes musicais do site jw.org",
	}

	downloadAllCmd := &cobra.Command{
		Use:   "all",
		Short: "Baixa todos os clipes dispon√≠veis",
		Long:  "Baixa todos os clipes musicais dispon√≠veis na p√°gina de clipes do jw.org",
		RunE: func(cmd *cobra.Command, args []string) error {
			return c.downloadAll()
		},
	}

	downloadTitleCmd := &cobra.Command{
		Use:   "title [t√≠tulo]",
		Short: "Baixa um clipe espec√≠fico por t√≠tulo",
		Long:  "Baixa um clipe musical espec√≠fico procurando pelo t√≠tulo exato",
		Args:  cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			return c.downloadSpecific(args[0])
		},
	}

	checkCmd := &cobra.Command{
		Use:   "check",
		Short: "Verifica novos clipes dispon√≠veis",
		Long:  "Verifica se h√° novos clipes dispon√≠veis sem fazer download",
		RunE: func(cmd *cobra.Command, args []string) error {
			return c.checkNewClipes()
		},
	}

	configCmd := &cobra.Command{
		Use:   "config",
		Short: "Gerencia configura√ß√µes",
		Long:  "Gerencia as configura√ß√µes da aplica√ß√£o",
	}

	configOutputCmd := &cobra.Command{
		Use:   "output-dir [caminho]",
		Short: "Define o diret√≥rio de sa√≠da",
		Long:  "Define o diret√≥rio onde os clipes ser√£o salvos",
		Args:  cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			return c.setOutputDirectory(args[0])
		},
	}

	downloadAllCmd.Flags().BoolP("verbose", "v", false, "Modo verboso")
	downloadTitleCmd.Flags().BoolP("verbose", "v", false, "Modo verboso")
	checkCmd.Flags().Bool("dry-run", true, "Apenas verificar sem baixar (sempre ativo neste comando)")

	downloadCmd.AddCommand(downloadAllCmd, downloadTitleCmd)
	configCmd.AddCommand(configOutputCmd)
	rootCmd.AddCommand(downloadCmd, checkCmd, configCmd)

	return rootCmd.Execute()
}

func (c *CLI) downloadAll() error {
	showSmallBanner()
	fmt.Println("üéµ Iniciando download de todos os clipes musicais...")
	fmt.Printf("üìÅ Diret√≥rio de sa√≠da: %s\n", c.config.Download.OutputDirectory)
	fmt.Printf("üë• Workers concorrentes: %d\n", c.config.Download.ConcurrentWorkers)
	fmt.Println()

	err := c.downloadService.DownloadAllClipes(c.config.Scraping.BaseURL)
	if err != nil {
		fmt.Printf("‚ùå Erro: %v\n", err)
		return err
	}

	fmt.Println("‚úÖ Download conclu√≠do com sucesso!")
	return nil
}

func (c *CLI) downloadSpecific(titulo string) error {
	showSmallBanner()
	fmt.Printf("üéµ Procurando clipe: %s\n", titulo)
	fmt.Printf("üìÅ Diret√≥rio de sa√≠da: %s\n", c.config.Download.OutputDirectory)
	fmt.Println()

	err := c.downloadService.DownloadSpecificClipe(c.config.Scraping.BaseURL, titulo)
	if err != nil {
		fmt.Printf("‚ùå Erro: %v\n", err)
		return err
	}

	fmt.Println("‚úÖ Download conclu√≠do!")
	return nil
}

func (c *CLI) checkNewClipes() error {
	showSmallBanner()
	fmt.Println("üîç Verificando novos clipes dispon√≠veis...")
	fmt.Println()

	novosClipes, err := c.downloadService.CheckForNewClipes(c.config.Scraping.BaseURL)
	if err != nil {
		fmt.Printf("‚ùå Erro: %v\n", err)
		return err
	}

	if len(novosClipes) == 0 {
		fmt.Println("‚úÖ Nenhum clipe novo encontrado. Todos os clipes j√° foram baixados!")
		return nil
	}

	fmt.Printf("üìã Encontrados %d novos clipes:\n\n", len(novosClipes))
	for i, clipe := range novosClipes {
		fmt.Printf("%d. %s\n", i+1, clipe.Titulo)
		if clipe.Ano > 0 {
			fmt.Printf("   Ano: %d\n", clipe.Ano)
		}
		fmt.Printf("   URL: %s\n", clipe.URL)
		fmt.Println()
	}

	fmt.Printf("üí° Execute 'downloader-music download all' para baixar os novos clipes.\n")
	return nil
}

func (c *CLI) setOutputDirectory(dir string) error {
	if dir[0] == '~' {
		homeDir, err := os.UserHomeDir()
		if err != nil {
			return fmt.Errorf("erro ao obter diret√≥rio home: %w", err)
		}
		dir = filepath.Join(homeDir, dir[1:])
	}

	err := os.MkdirAll(dir, 0755)
	if err != nil {
		return fmt.Errorf("erro ao criar diret√≥rio: %w", err)
	}

	c.config.Download.OutputDirectory = dir

	configPath := filepath.Join("configs", "config.yaml")
	err = config.SaveConfig(c.config, configPath)
	if err != nil {
		return fmt.Errorf("erro ao salvar configura√ß√£o: %w", err)
	}

	fmt.Printf("‚úÖ Diret√≥rio de sa√≠da configurado: %s\n", dir)
	return nil
}
